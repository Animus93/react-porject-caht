{"version":3,"file":"static/js/752.46202d36.chunk.js","mappings":"qSACA,EAAmC,oCAAnC,EAA8E,wBAA9E,EAA+G,0B,SC6F/G,EAnFkB,WAChB,IAAMA,GAAWC,EAAAA,EAAAA,MACXC,GAAkBC,EAAAA,EAAAA,cAAY,SAAAC,GAAK,OAAIA,EAAMC,KAAKC,GAAf,IACzC,GAAgCC,EAAAA,EAAAA,UAAS,CAAEC,MAAO,GAAIC,SAAU,KAAhE,eAAOC,EAAP,KAAiBC,EAAjB,KACA,GAAmCC,EAAAA,EAAAA,MAAnC,eAAOC,EAAP,KAAoBC,EAApB,KAAoBA,UACNC,GAAUC,EAAAA,EAAAA,MAAhBC,KACR,GAAiBC,EAAAA,EAAAA,MAAVC,GAAP,eAEMC,EAAgB,SAAAC,GACpB,IAAMC,EAAYD,EAAME,cAAcC,OAAS,GACzCC,EAAWJ,EAAME,cAAcG,MAAQ,GAC7Cf,GAAY,SAAAgB,GAAI,yBAAUA,GAAV,cAAiBF,EAAWH,GAA5B,GACjB,GAEDM,EAAAA,EAAAA,YAAU,WACRC,GACD,IAED,IAAMA,EAAa,WACb3B,GACFF,EAAS,0BAEZ,EAEK8B,EAAW,mCAAG,WAAMC,GAAN,gFAClBA,EAAEC,iBACEC,EAAY,KAFE,kBAIOpB,EAAWH,GAAUwB,SAJ5B,UAIVC,EAJU,OAKhBpB,EAAMqB,SAAQ,SAAAC,GACZ,GAAIA,EAAQhC,KAAKG,QAAU2B,EAAS9B,KAAKG,MACvC,OAAQyB,EAAYI,EAAQC,EAE/B,KACGL,EAVY,wBAWdd,EAAOc,GAXO,iCAcR,IAAIM,MAdI,0DAiBhBC,QAAQC,IAAR,MACAC,MAAM,2IAlBU,QAoBlBb,IApBkB,0DAAH,sDAuBjB,OACE,8BACGf,GACC,iFAEA,kBAAM6B,UAAWC,EAAyBC,SAAUf,EAApD,WACE,4DACA,kBACEgB,YAAY,iCACZC,SAAU3B,EACVI,MAAOd,EAASF,OAAS,GACzBkB,KAAK,QACLsB,UAAQ,KAEV,kBACEF,YAAY,uCACZC,SAAU3B,EACVI,MAAOd,EAASD,UAAY,GAC5BiB,KAAK,WACLsB,UAAQ,KAEV,mBAAQL,UAAWC,EAAeK,KAAK,SAAvC,6CAGA,SAAC,KAAD,CACEN,UAAWC,EACXM,GAAI,kCAFN,8HAUT,C,uBC5FD,SAASC,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQlD,EAAKmD,GACpE,IACE,IAAIC,EAAON,EAAI9C,GAAKmD,GAChBjC,EAAQkC,EAAKlC,KAInB,CAHE,MAAOmC,GAEP,YADAL,EAAOK,EAET,CAEID,EAAKE,KACPP,EAAQ7B,GAERqC,QAAQR,QAAQ7B,GAAOsC,KAAKP,EAAOC,EAEvC,CAEe,SAASO,EAAkBC,GACxC,OAAO,WACL,IAAIC,EAAOC,KACPC,EAAOC,UACX,OAAO,IAAIP,SAAQ,SAAUR,EAASC,GACpC,IAAIF,EAAMY,EAAGK,MAAMJ,EAAME,GAEzB,SAASZ,EAAM/B,GACb2B,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,OAAQhC,EAClE,CAEA,SAASgC,EAAOc,GACdnB,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,QAASc,EACnE,CAEAf,OAAMgB,EACR,GACF,CACF,C","sources":["webpack://react-porject-caht/./src/components/LoginForm/LoginForm.module.css?4ac5","components/LoginForm/LoginForm.jsx","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"RegistrationForm\":\"LoginForm_RegistrationForm__VeyuW\",\"link\":\"LoginForm_link__IJw1a\",\"submit\":\"LoginForm_submit__3B7iC\"};","import { useEffect } from 'react';\nimport { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { NavLink, useNavigate } from 'react-router-dom';\nimport { useUserLoggedInMutation } from 'redux/userHerokuappApi';\nimport {\n  useGetUsersQuery,\n  useUserOnlineMutation,\n} from 'redux/usersApiMockapi';\nimport styles from './LoginForm.module.css';\n//Объединить  компонентом RegistrationForm??\nconst LoginForm = () => {\n  const navigate = useNavigate();\n  const isUserRegistred = useSelector(state => state.user.key);\n  const [userData, setUserData] = useState({ email: '', password: '' });\n  const [userLogged, {isLoading }] = useUserLoggedInMutation();\n  const { data: users } = useGetUsersQuery();\n  const [online] = useUserOnlineMutation();\n\n  const onUpdateState = event => {\n    const dataValue = event.currentTarget.value || '';\n    const dataName = event.currentTarget.name || '';\n    setUserData(prev => ({ ...prev, [dataName]: dataValue }));\n  };\n\n  useEffect(() => {\n    navigation();\n  });\n\n  const navigation = () => {\n    if (isUserRegistred) {\n      navigate('/react-porject/MainForm');\n    }\n  };\n\n  const isUserExist = async e => {\n    e.preventDefault();\n    let currentId = null;\n    try {\n      const response = await userLogged(userData).unwrap();\n      users.forEach(current => {\n        if (current.user.email === response.user.email) {\n          return (currentId = current.id);\n        }\n      });\n      if (currentId) {\n        online(currentId);\n        return;\n      } else {\n        throw new Error();\n      }\n    } catch (err) {\n      console.log(err);\n      alert('Неверный логин или пароль');\n    }\n    navigation();\n  };\n\n  return (\n    <>\n      {isLoading ? (\n        <h1>Загрузка...</h1>\n      ) : (\n        <form className={styles.RegistrationForm} onSubmit={isUserExist}>\n          <h2>Войти</h2>\n          <input\n            placeholder=\"почта\"\n            onChange={onUpdateState}\n            value={userData.email || ''}\n            name=\"email\"\n            required\n          />\n          <input\n            placeholder=\"пароль\"\n            onChange={onUpdateState}\n            value={userData.password || ''}\n            name=\"password\"\n            required\n          />\n          <button className={styles.submit} type=\"submit\">\n            Войти\n          </button>\n          <NavLink\n            className={styles.link}\n            to={'/react-porject/RegistrationForm'}\n          >\n            Зарегистрироваться\n          </NavLink>\n        </form>\n      )}\n    </>\n  );\n};\n\nexport default LoginForm;\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}"],"names":["navigate","useNavigate","isUserRegistred","useSelector","state","user","key","useState","email","password","userData","setUserData","useUserLoggedInMutation","userLogged","isLoading","users","useGetUsersQuery","data","useUserOnlineMutation","online","onUpdateState","event","dataValue","currentTarget","value","dataName","name","prev","useEffect","navigation","isUserExist","e","preventDefault","currentId","unwrap","response","forEach","current","id","Error","console","log","alert","className","styles","onSubmit","placeholder","onChange","required","type","to","asyncGeneratorStep","gen","resolve","reject","_next","_throw","arg","info","error","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined"],"sourceRoot":""}